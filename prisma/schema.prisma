generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Fighter {
  id                          String    @id @default(cuid())
  name                        String
  nickname                    String?
  wins                        Int       @default(0)
  losses                      Int       @default(0)
  draws                       Int       @default(0)
  weightClass                 String
  imageUrl                    String?
  record                      String?
  height                      String?
  reach                       String?
  age                         Int?
  nationality                 String?
  winsByKO                    Int       @default(0)
  winsBySubmission            Int       @default(0)
  winsByDecision              Int       @default(0)
  currentStreak               String?
  ranking                     Int?
  finishRate                  Float     @default(0)
  koPercentage                Float     @default(0)
  submissionPercentage        Float     @default(0)
  averageFightTime            Int       @default(0)
  significantStrikesPerMinute Float     @default(0)
  takedownAccuracy            Float     @default(0)
  socialFollowers             Int       @default(0)
  recentBuzzScore             Float     @default(0)
  fanFavorite                 Boolean   @default(false)
  funScore                    Float     @default(0)
  fightingStyles              String    @default("[]")
  lastFightDate               DateTime?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  fighter1Fights              Fight[]   @relation("Fighter1")
  fighter2Fights              Fight[]   @relation("Fighter2")

  @@map("fighters")
}

model Event {
  id              String            @id @default(cuid())
  name            String
  date            DateTime
  location        String
  venue           String
  completed       Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  fights          Fight[]
  predictionUsage PredictionUsage[]

  @@map("events")
}

model Fight {
  id                  String   @id @default(cuid())
  fighter1Id          String
  fighter2Id          String
  eventId             String
  weightClass         String
  titleFight          Boolean  @default(false)
  mainEvent           Boolean  @default(false)
  cardPosition        String   @default("preliminary")
  scheduledRounds     Int      @default(3)
  fightNumber         Int?
  funFactor           Int      @default(0)
  finishProbability   Int      @default(0)
  entertainmentReason String?
  keyFactors          String   @default("[]")
  fightPrediction     String?
  riskLevel           String?
  predictedFunScore   Float    @default(0)
  funFactors          String   @default("[]")
  aiDescription       String?
  completed           Boolean  @default(false)
  actualFunScore      Float?
  winnerId            String?
  method              String?
  round               Int?
  time                String?
  bookingDate         DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  event               Event    @relation(fields: [eventId], references: [id])
  fighter1            Fighter  @relation("Fighter1", fields: [fighter1Id], references: [id])
  fighter2            Fighter  @relation("Fighter2", fields: [fighter2Id], references: [id])

  @@map("fights")
}

model FunScoreHistory {
  id             String   @id @default(cuid())
  fightId        String
  predictedScore Float
  actualScore    Float?
  accuracy       Float?
  modelVersion   String
  createdAt      DateTime @default(now())

  @@map("fun_score_history")
}

model PredictionModel {
  id               String   @id @default(cuid())
  version          String   @unique
  finishRateWeight Float    @default(0.3)
  stylisticWeight  Float    @default(0.25)
  popularityWeight Float    @default(0.15)
  stakesWeight     Float    @default(0.2)
  historicalWeight Float    @default(0.1)
  confidence       Float    @default(0)
  trainingAccuracy Float    @default(0)
  active           Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("prediction_models")
}

model PredictionUsage {
  id                        String   @id @default(cuid())
  eventId                   String
  eventName                 String
  fightsProcessed           Int
  chunks                    Int
  promptTokensEstimated     Int
  completionTokensEstimated Int
  totalTokensEstimated      Int
  source                    String
  createdAt                 DateTime @default(now())
  event                     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("prediction_usage")
}
