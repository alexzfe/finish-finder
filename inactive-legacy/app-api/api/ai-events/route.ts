// AI Events API Route - Serve AI-generated events to the frontend
import { NextRequest, NextResponse } from 'next/server'

export async function GET(request: NextRequest) {
  try {
    console.log('ðŸ¤– Serving AI-generated UFC events...')

    // This would be generated by our AI service in production
    // For now, using our well-structured demo data
    const aiGeneratedEvents = [
      {
        id: "ufc-fight-night-ulberg-vs-reyes",
        name: "UFC Fight Night: Ulberg vs. Reyes",
        date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(),
        location: "Perth, Australia",
        venue: "RAC Arena",
        fightCard: [
          {
            id: "fight-1",
            fighter1Id: "carlos-ulberg",
            fighter2Id: "dominick-reyes",
            fighter1Name: "Carlos Ulberg",
            fighter2Name: "Dominick Reyes",
            weightClass: "Light Heavyweight",
            cardPosition: "main",
            scheduledRounds: 5,
            status: "scheduled",
            finishProbability: 85,
            excitementLevel: 9,
            prediction: "Both fighters are powerful strikers with knockout ability. Ulberg's recent form and home crowd advantage make this a likely finish. Expect fireworks!"
          },
          {
            id: "fight-2",
            fighter1Id: "jack-jenkins",
            fighter2Id: "gavin-tucker",
            fighter1Name: "Jack Jenkins",
            fighter2Name: "Gavin Tucker",
            weightClass: "Featherweight",
            cardPosition: "main",
            scheduledRounds: 3,
            status: "scheduled",
            finishProbability: 70,
            excitementLevel: 8,
            prediction: "Jenkins is a submission specialist while Tucker brings striking power. Stylistic clash should create exciting exchanges."
          },
          {
            id: "fight-3",
            fighter1Id: "jimmy-crute",
            fighter2Id: "alonzo-menifield",
            fighter1Name: "Jimmy Crute",
            fighter2Name: "Alonzo Menifield",
            weightClass: "Light Heavyweight",
            cardPosition: "preliminary",
            scheduledRounds: 3,
            status: "scheduled",
            finishProbability: 75,
            excitementLevel: 7,
            prediction: "Two heavy hitters who rarely go to decision. Both have knockout power and aggressive styles."
          },
          {
            id: "fight-4",
            fighter1Id: "casey-oneill",
            fighter2Id: "luana-santos",
            fighter1Name: "Casey O'Neill",
            fighter2Name: "Luana Santos",
            weightClass: "Women's Flyweight",
            cardPosition: "preliminary",
            scheduledRounds: 3,
            status: "scheduled",
            finishProbability: 45,
            excitementLevel: 6,
            prediction: "Technical battle between two well-rounded fighters. O'Neill's grappling vs Santos' striking."
          },
          {
            id: "fight-5",
            fighter1Id: "tom-nolan",
            fighter2Id: "victor-martinez",
            fighter1Name: "Tom Nolan",
            fighter2Name: "Victor Martinez",
            weightClass: "Lightweight",
            cardPosition: "early-preliminary",
            scheduledRounds: 3,
            status: "scheduled",
            finishProbability: 60,
            excitementLevel: 7,
            prediction: "Local favorite Nolan brings crowd energy. Martinez is dangerous early - expect fast-paced action."
          }
        ]
      },
      {
        id: "ufc-309-jones-vs-miocic",
        name: "UFC 309: Jones vs. Miocic",
        date: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString(),
        location: "New York, NY",
        venue: "Madison Square Garden",
        fightCard: [
          {
            id: "fight-6",
            fighter1Id: "jon-jones",
            fighter2Id: "stipe-miocic",
            fighter1Name: "Jon Jones",
            fighter2Name: "Stipe Miocic",
            weightClass: "Heavyweight",
            cardPosition: "main",
            scheduledRounds: 5,
            status: "scheduled",
            finishProbability: 75,
            excitementLevel: 10,
            prediction: "GOAT vs GOAT! Jones' versatility against Miocic's boxing and experience. This is what title fights are made of."
          },
          {
            id: "fight-7",
            fighter1Id: "oliveira",
            fighter2Id: "chandler",
            fighter1Name: "Charles Oliveira",
            fighter2Name: "Michael Chandler",
            weightClass: "Lightweight",
            cardPosition: "main",
            scheduledRounds: 5,
            status: "scheduled",
            finishProbability: 90,
            excitementLevel: 9,
            prediction: "Violence guaranteed! Both fighters bring submission skills and knockout power. Someone's getting finished."
          }
        ]
      }
    ]

    // Separate fights into card categories for each event
    aiGeneratedEvents.forEach(event => {
      event.mainCard = event.fightCard.filter(f => f.cardPosition === 'main')
      event.prelimCard = event.fightCard.filter(f => f.cardPosition === 'preliminary')
      event.earlyPrelimCard = event.fightCard.filter(f => f.cardPosition === 'early-preliminary')
    })

    console.log(`âœ… Serving ${aiGeneratedEvents.length} AI-generated events`)
    console.log(`ðŸŽ¯ Total fights: ${aiGeneratedEvents.reduce((sum, event) => sum + event.fightCard.length, 0)}`)

    return NextResponse.json({
      success: true,
      events: aiGeneratedEvents,
      metadata: {
        source: 'AI-generated',
        totalEvents: aiGeneratedEvents.length,
        totalFights: aiGeneratedEvents.reduce((sum, event) => sum + event.fightCard.length, 0),
        avgExcitement: Math.round(
          aiGeneratedEvents.reduce((sum, event) =>
            sum + event.fightCard.reduce((fSum, fight) => fSum + fight.excitementLevel, 0), 0
          ) / aiGeneratedEvents.reduce((sum, event) => sum + event.fightCard.length, 0)
        ),
        avgFinishProbability: Math.round(
          aiGeneratedEvents.reduce((sum, event) =>
            sum + event.fightCard.reduce((fSum, fight) => fSum + fight.finishProbability, 0), 0
          ) / aiGeneratedEvents.reduce((sum, event) => sum + event.fightCard.length, 0)
        )
      }
    })

  } catch (error) {
    console.error('Error serving AI events:', error)
    return NextResponse.json(
      {
        success: false,
        error: 'Failed to serve AI events',
        message: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    )
  }
}